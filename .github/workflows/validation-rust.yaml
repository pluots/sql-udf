---

# Main "useful" actions config file
# Cache config comes from https://github.com/actions/cache/blob/main/examples.md#rust---cargo
# actions-rs/toolchain configures rustup
# actions-rs/cargo actually runs cargo

on:
  push:
    branches:
    - main
  pull_request:

name: Rust Validation

env:
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  CARGO_UNSTABLE_SPARSE_REGISTRY: true

jobs:
  check:
    name: "Check (cargo check)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: beta
          override: true
      - uses: actions-rs/cargo@v1
        # check with all features
        with:
          command: check
          args: --all-features --all-targets
      - uses: actions-rs/cargo@v1
        # check with no features
        with:
          command: check
          args: --no-default-features --all-targets

  test:
    strategy:
      fail-fast: true
      matrix:
        include:
        - build: linux
          os: ubuntu-latest
          target: x86_64-unknown-linux-musl
          extension: ''
        # - build: macos
        #   os: macos-latest
        #   target: x86_64-apple-darwin
        #   extension: ''
        - build: windows-msvc
          os: windows-latest
          target: x86_64-pc-windows-msvc
    name: "Test on ${{ matrix.os }} (cargo test)"
    runs-on: ${{ matrix.os }}
    env:
      MYSQLCLIENT_LIB_DIR: C:\mysql\lib
    steps:
      - uses: actions/checkout@v2
      - name: List files
        run: |
          pwd
          ls
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  integration:
    name: "Integration testing (docker)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache-docker
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Enable logging-debug-calls
        run: |
          perl -0777 -i -pe 's/(udf =.*features = \[)/\1"logging-debug-calls",\3/g' udf-examples/Cargo.toml
          cat udf-examples/Cargo.toml
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Image
        uses: docker/build-push-action@v3
        with:
          load: true
          tags: mdb-example-so:latest
          file: Dockerfile.examples
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          context: .
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Start docker
        run: >
          docker run --rm -d
          -p 12300:3306
          -e MARIADB_ROOT_PASSWORD=example
          -e RUST_LIB_BACKTRACE=1
          --name mdb-example-container
          mdb-example-so
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # Our built integration images use stable so we are testing that (as
          # intended). We use nightly here to speed up this time chunk with
          # cargo sparse
          toolchain: nightly
          override: true
      - name: Run integration testing
        # Run only integration tests with `--test '*'`
        run: cargo test -p udf-examples --test '*' --features backend
      - name: Print docker logs
        if: always()
        run: |
          docker logs mdb-example-container
          # If any critical / debug options were printed, error out
          docker logs mdb-example-container 2>&1 | grep -E '\[(Critical|Error)\]' || exit 0 && exit 1;
          docker stop mdb-example-container


  miri:
    name: Miri
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - run: rustup component add miri
      - name: Run Miri
        env:
          # Can't use chrono for time in isolation
          MIRIFLAGS: -Zmiri-disable-isolation
        run: cargo miri test

  fmt:
    name: "Format (cargo fmt)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - uses: actions/setup-python@v3
      - name: Validate pre-commit
        uses: pre-commit/action@v3.0.0

  clippy:
    name: "Clippy (cargo clippy)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # Some nice checks are only nightly
          toolchain: nightly
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --all-targets -- -D warnings

  doc:
    name: "Docs (cargo doc)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: doc
